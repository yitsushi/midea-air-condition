#!/usr/bin/env ruby
# frozen_string_literal: true

require 'thor'
require 'yaml'
require 'midea_air_condition'

# Command Line Interface
class MideaCLI < Thor
  CONFIG_PATH = File.expand_path('~/.midea/config')

  desc 'configure', 'Configure client'
  def configure
    credentials = {}
    credentials['email'] = ask('Email:')
    credentials['password'] = ask('Password:')
    credentials['app_key'] = ask('App key:')
    config_dir = File.dirname(CONFIG_PATH)
    Dir.mkdir(config_dir) unless Dir.exist?(config_dir)
    File.write(CONFIG_PATH, credentials.to_yaml)
  end

  desc 'list', 'List devices'
  def list
    devices = client.appliance_list
    head = [
      { name: 'ID',     id: 'id'           },
      { name: 'Name',   id: 'name'         },
      { name: 'Type',   id: 'type'         },
      { name: 'Online', id: 'onlineStatus' },
      { name: 'Active', id: 'activeStatus' }
    ]
    print_table(devices, head)
  end

  # rubocop:disable Metrics/AbcSize
  # rubocop:disable Metrics/MethodLength
  desc 'get ID', 'Gets device\'s information'
  def get(id)
    command = MideaAirCondition::Command::RequestStatus.new
    device = send_command(id, command)
    puts "Device is turned #{print_on_off(device.power_status)}."
    full_temp = "#{device.temperature}.#{device.temperature_dot}"
    unit = device.temperature_unit
    puts "Target temperature: #{full_temp} #{unit}"
    puts "Indoor temperature: #{device.indoor_temperature} #{unit}"
    puts "Outdoor temperature: #{device.outdoor_temperature} #{unit}"
    puts "Mode: #{device.mode_human}"
    puts "Fan speed: #{device.fan_speed}"
    puts "TimerOn is #{print_not(device.on_timer[:status])} active."
    puts "  at:  #{device.on_timer_human}" if device.on_timer[:status]
    puts "TimerOff is #{print_not(device.off_timer[:status])} active."
    puts "  at: #{device.off_timer_human}" if device.off_timer[:status]
    puts "Eco mode is #{print_on_off(device.eco)}."
  end
  # rubocop:enable Metrics/MethodLength

  desc 'set ID', 'Sets device\'s power, temperature and fan speed'
  method_option :power, required: false, type: :string, aliases: '-p', desc: 'Power'
  method_option :target_temperature, required: false, type: :numeric, aliases: '-t', desc: 'Target temperature'
  method_option :mode, required: false,
                       default: 1,
                       type: :numeric,
                       aliases: '-m',
                       desc: 'Mode [1: auto; 2: cool; 3: dry; 4: heat, 5: fan]'
  method_option :fan_speed, required: false, type: :numeric, aliases: '-f', desc: 'Fan speed'
  method_option :unit, required: false, default: 'C', type: :string, aliases: '-u', desc: 'Temperature unit'
  def set(id)
    command = MideaAirCondition::Command::Set.new
    command.turn_off if options[:power] == 'off'
    command.turn_on if options[:power] == 'on'
    command.temperature(options[:target_temperature], options[:mode]) if options[:target_temperature]
    command.fan_speed(options[:fan_speed]) if options[:fan_speed]
    command.unit(options[:unit])
    send_command(id, command)
  end
  # rubocop:enable Metrics/AbcSize

  # rubocop:disable Metrics/BlockLength
  no_commands do
    def credentials
      return @credentials if @credentials

      if (@credentials = credentials_from_env)
        @credentials
      elsif (@credentials = credentials_from_yaml)
        @credentials
      else
        raise Thor::Error, 'No credentials found'
      end
    end

    def credentials_from_env
      env_variables = %w[MIDEA_AC_EMAIL MIDEA_AC_PASSWORD MIDEA_AC_APP_KEY]
      env_prefix = 'MIDEA_AC_'
      return nil unless env_variables.all? { |k| ENV.key? k }

      Hash[
        ENV.select { |k, _| env_variables.include?(k) }
           .map { |k, v| [k.gsub(env_prefix, '').downcase, v] }
      ]
    end

    def credentials_from_yaml
      return nil unless File.file?(CONFIG_PATH)

      YAML.load_file(CONFIG_PATH)
    end

    def client
      return @client if @client

      @client = MideaAirCondition::Client.new(
        credentials['email'],
        credentials['password'],
        app_key: credentials['app_key']
      )
      @client.login
      @client
    end

    def send_command(id, command)
      builder = client.new_packet_builder
      builder.add_command(command)
      begin
        response = client.appliance_transparent_send(id, builder.finalize)
      rescue RuntimeError => e
        raise Thor::Error, 'The device is offline.' if e.message == 'the appliance is off line.'

        raise e
      end

      MideaAirCondition::Device.new(response)
    end

    def print_on_off(value)
      value ? 'on' : 'off'
    end

    def print_not(value)
      value ? '' : 'not'
    end

    def print_table(values, head)
      calculate_table_width!(values, head)
      print_line(head)
      print_head(head)
      print_line(head)
      values.each { |row| print_row(head, row) }
      print_line(head)
    end

    def calculate_table_width!(values, head)
      head.each do |title|
        title[:lenght] = (values.map { |value| value[title[:id]].to_s.length } + [title[:name].length]).max
      end
    end

    def print_line(head)
      puts '-' * (head.map { |e| e[:lenght] + 3 }.reduce(&:+) + 1)
    end

    def print_head(head)
      columns = head.map { |e| e[:name].ljust(e[:lenght], ' ') }
      puts '| ' + columns.join(' | ') + ' |'
    end

    def print_row(head, row)
      columns = head.map { |e| row[e[:id]].to_s.ljust(e[:lenght], ' ') }
      puts '| ' + columns.join(' | ') + ' |'
    end
  end
  # rubocop:enable Metrics/BlockLength
end

MideaCLI.start
